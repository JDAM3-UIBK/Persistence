  @Autowired
  public UserManagementImpl(UserRepository userRepository,
    RoleRepository roleRepository) {
    this.userRepository = userRepository;
    this.roleRepository = roleRepository;
  }
  
http://docs.spring.io/spring-data/jpa/docs/1.3.0.RELEASE/reference/html/jpa.repositories.html

 Obtaining the Primary Key

JPA 2 provides a generic method for getting the object ID (primary key) of a specified managed entity object. 
For example:

PersistenceUnitUtil util = emf.getPersistenceUnitUtil();
Object projectId = util.getIdentifier(project);

A PersistenceUnitUtil instance is obtained from the EntityManagerFactory. 
The getIdentifier method takes one argument, a managed entity object, and returns the primary key. 
In case of a composite primary key - an instance of the ID class or the embeddable class is returned.

http://www.objectdb.com/java/jpa/entity/id#Embedded_Primary_Key_

RouteRepository:
/*
	 * The first id refers to attribute id of EntityClass (of type RouteDB), 
	 * and the second one refers to the id property of EmbeddedIdClass
	 * 
	 * http://stackoverflow.com/questions/10649691/using-embeddedid-with-jparepository
	 */
	/*
	@Query("select r from ROUTE r where id.user_name_id =:username")
	  public RouteDB findRouteByUsername(@Param("username") String username);
	 */
	//@Query("select r.id from loggedroute r where r.userName = :username")
	//public Long findRouteIdByUsername(@Param("username") String username);


UserManagement:
	
	/*
	// Bsp: http://localhost:8080/cp414/autoid?id=2 
	@RequestMapping(value="/create", method=RequestMethod.GET)
	public @ResponseBody String create(
							@RequestParam(value="username", required=true)String username,
							@RequestParam(value="password", required=true )String password
							){
		User user = new User();
		user.setUser_name_id(username);
		user.setUser_pw(password);
		
		userService.insert(user);
		
		return "User: " + username + " successfully created";
	}
	

	 @RequestMapping(value = "/createPost", method = RequestMethod.POST)
	 public @ResponseBody String createPost(@RequestParam("json") String json,
			 								@RequestBody String json2
			 								) {
		 									
		 //System.out.println("Received POST request:" + json);
    	
	     return json;
	 }
	//http://docs.spring.io/spring-roo/reference/html/base-json.html
	 
	 @RequestMapping(method = RequestMethod.POST)
	 public @ResponseBody User compareUser(@RequestBody String userJson) throws UserNotFound {						
		 //System.out.println("Received POST request:" + json);
	
		 User userClient = new JSONDeserializer<User>().deserialize(userJson, User.class );
		 //search for User, if it exists
		 User userDB = userService.findByNameId(userClient.getUser_name_id());
		 
		 if(userDB == null){
			 
			 throw new UserNotFound();	 
		 }
		 if(userClient.getUser_pw().compareTo(userDB.getUser_pw()) != 0){
			 userDB = null;
		 }
		 
		 return userDB;
		 
	 }
	 */